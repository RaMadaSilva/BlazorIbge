@page "/locality/delete/{id:long}"
@rendermode InteractiveServer
@inject ILocalityService Service
@inject NavigationManager Navigation

@attribute [Authorize]


<h2>Delete Locality</h2>
<hr />

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        @error
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
<div class="form-control mb-3">
    <EditForm Model="@Model" OnValidSubmit="OnDeleteAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label class="form-label">Id</label>
        <InputNumber @bind-Value = "Model.Id" class="form-control" readonly/>
        <label class="form-label">City</label>
        <InputText @bind-Value="Model.City" class="form-control" readonly />
        <label class="form-label">State</label>
        <InputText @bind-Value="Model.State" class="form-control" readonly />
        <br/>
        <div>
            <button type="submit" class="btn btn-danger">
                <span class="bi bi-trash3"></span>
                Excluir
            </button>
            &nbsp;
            <a href="/locality" class="btn btn-link">Cancelar</a>
        </div>
        
        
    </EditForm>

</div>

@code {

    [Parameter]
    public long Id { get; set; }

    public LocalityViewModel Model { get; set; } = new();

    private string? error; 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await Service.GetbyIdAsync(Id);
        }catch(Exception ex)
        {
            error = ex.Message;
        }

    }
    private async Task OnDeleteAsync()
    {
        try
        {
            await Service.RemoveAsync(Model.Id);
            Navigation.NavigateTo("/locality");
        }catch(Exception ex)
        {
            error = ex.Message; 
        }
    }
}