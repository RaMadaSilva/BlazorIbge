@page "/locality"
@inject ILocalityService Service
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [StreamRendering(true)]

<h3>Localities</h3>

@if(IsAutenticated)
{
    <a href="/locality/create" class="btn btn-success">
        <span class="bi bi-plus-lg"></span>
        Create
    </a>
}


@if (!localityViewModels.Any())
{
    <p class="text-center"> Loading Locations... </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Acronym of State</th>
                <th>Name of City</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Locality in localityViewModels)
            {
                <tr>
                    <td>@Locality.Id</td>
                    <td>@Locality.State</td>
                    <td>@Locality.City</td>
                    <td>
                        @if (IsAutenticated)
                            {
                            <a href="/locality/edit/@Locality.Id" class="btn btn-primary">
                                <span class="bi bi-pencil"></span>
                            </a>
                            <span>&nbsp;</span>

                            <a href="/locality/detail/@Locality.Id" class="btn btn-info">
                                <span class="bi bi-eye"></span>
                            </a>
                            <span>&nbsp;</span>

                            <a href="/locality/delete/@Locality.Id" class="btn btn-danger">
                                <span class="bi bi-trash3"></span>
                            </a>
                        }
                    </td>
                </tr>

            }
        </tbody>
    </table>
}

@code {

    private bool IsAutenticated; 

    public IEnumerable<LocalityViewModel> localityViewModels { get; set; } = Enumerable.Empty<LocalityViewModel>();

    protected override async Task OnInitializedAsync()
    {
        var authSate =  await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsAutenticated = authSate.User.Identity.IsAuthenticated; 

        localityViewModels = await Service.GetAsync();
    }
}
